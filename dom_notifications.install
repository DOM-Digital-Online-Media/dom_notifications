<?php

/**
 * @file
 * Custom tables, updates and install/uninstall functionality.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_schema().
 */
function dom_notifications_schema() {
  return [
    'dom_notifications_user_channels' => [
      'description' => 'Tracks users and notification channels they subscribed to.',
      'fields' => [
        'channel_plugin_id' => [
          'description' => 'Plugin ID as it is written in channel plugin annotation.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ],
        'uid' => [
          'description' => 'User ID of a user subscribed to the channel.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'channel_id' => [
          'description' => 'Channel ID without placeholders.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ],
        'notify' => [
          'description' => 'Boolean indicating whether or not user should be notified about the notification for the channel.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 1,
          'size' => 'tiny',
        ],
      ],
      'primary key' => ['uid', 'channel_id'],
      'foreign keys' => [
        'user' => [
          'table' => 'users',
          'columns' => [
            'uid' => 'uid',
          ],
        ],
        'notification' => [
          'table' => 'dom_notification',
          'columns' => [
            'channel_id' => 'channel_id',
          ],
        ],
      ],
    ],
    'dom_notifications_read' => [
      'description' => 'Tracks users and notification that they already read.',
      'fields' => [
        'uid' => [
          'description' => 'User ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'nid' => [
          'description' => 'Dom Notification ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
      ],
      'primary key' => ['uid', 'nid'],
      'foreign keys' => [
        'user' => [
          'table' => 'users',
          'columns' => [
            'uid' => 'uid',
          ],
        ],
        'notification' => [
          'table' => 'dom_notification',
          'columns' => [
            'nid' => 'id',
          ],
        ],
      ],
    ],
    'dom_notifications_seen' => [
      'description' => 'Tracks users and notification that they already seen.',
      'fields' => [
        'uid' => [
          'description' => 'User ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'nid' => [
          'description' => 'Dom Notification ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
      ],
      'primary key' => ['uid', 'nid'],
      'foreign keys' => [
        'user' => [
          'table' => 'users',
          'columns' => [
            'uid' => 'uid',
          ],
        ],
        'notification' => [
          'table' => 'dom_notification',
          'columns' => [
            'nid' => 'id',
          ],
        ],
      ],
    ],
  ];
}

/**
 * Install dom_notifications_seen table.
 */
function dom_notifications_update_8001() {
  $table = 'dom_notifications_seen';
  $schema = Database::getConnection()->schema();

  if (!$schema->tableExists($table)) {
    $spec = [
      'description' => 'Tracks users and notification that they already seen.',
      'fields' => [
        'uid' => [
          'description' => 'User ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'nid' => [
          'description' => 'Dom Notification ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
      ],
      'primary key' => ['uid', 'nid'],
      'foreign keys' => [
        'user' => [
          'table' => 'users',
          'columns' => [
            'uid' => 'uid',
          ],
        ],
        'notification' => [
          'table' => 'dom_notification',
          'columns' => [
            'nid' => 'id',
          ],
        ],
      ],
    ];

    $schema->createTable($table, $spec);
  }
}

/**
 * Make channel id notification entity field multiple.
 */
function dom_notifications_update_8002() {
  // To update the field schema we need to have no field data in the storage,
  // thus we retrieve it, delete it from storage, and write it back to the
  // storage after updating the schema.
  $database = \Drupal::database();

  // Retrieve existing field data.
  $channel_ids = $database->select('dom_notification_field_data', 'dnfd')
    ->fields('dnfd', ['id', 'channel_id'])
    ->execute()
    ->fetchAllKeyed();

  // Remove data from the storage.
  $database->update('dom_notification_field_data')
    ->fields(['channel_id' => NULL])
    ->execute();

  // Update definitions and schema.
  $manager = \Drupal::entityDefinitionUpdateManager();
  /** @var \Drupal\Core\Field\BaseFieldDefinition $storage_definition */
  $storage_definition = $manager->getFieldStorageDefinition('channel_id', 'dom_notification');
  $storage_definition->setLabel(t('Channels'));
  $storage_definition->setDescription(t('The channels identifying set of users subscribed to this notification.'));
  $storage_definition->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
  $manager->updateFieldStorageDefinition($storage_definition);

  // Restore entity data in the new schema.
  $insert_query = $database->insert('dom_notification__channel_id')
    ->fields(['bundle', 'deleted', 'entity_id', 'revision_id', 'langcode', 'delta', 'channel_id_value']);
  foreach ($channel_ids as $id => $channel_id) {
    $insert_query->values(['dom_notification', 0, $id, $id, 'en', 0, $channel_id]);
  }
  $insert_query->execute();
}

/**
 * Add base field to identify channel to which notification was assigned easier.
 */
function dom_notifications_update_8003(&$sandbox) {
  $definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Channels plugin'))
    ->setDescription(new TranslatableMarkup('The channels plugin id this notification belongs to.'))
    ->setTranslatable(FALSE);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('channel_plugin_id', 'dom_notification', 'dom_notification', $definition);
}
