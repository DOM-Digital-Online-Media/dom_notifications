<?php

/**
 * @file
 * Module file for Dom Notifications Stacking module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info().
 */
function dom_notifications_stacking_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'dom_notification') {
    $fields['stack_size'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Stack size'))
      ->setDescription(t('Indicates if the notification is a stacked notification for number of events.'))
      ->setInitialValue(1)
      ->setDefaultValue(1);
  }
  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function dom_notifications_stacking_dom_notification_delete(EntityInterface $entity) {
  /** @var \Drupal\dom_notifications_stacking\DomNotificationsStackingServiceInterface $service */
  $service = \Drupal::service('dom_notifications_stacking.service');
  /** @var \Drupal\dom_notifications\Entity\DomNotificationInterface $entity */
  if ($entity->isPublished() && ($count = $service->getCurrentStackSize($entity))) {
    // Update count in a table if notification is removed.
    $stack = (int) $entity->get('stack_size')->getString();
    $service->setCurrentStackSize($entity, max(0, $count - $stack));
  }
}
