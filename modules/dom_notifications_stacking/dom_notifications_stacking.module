<?php

/**
 * @file
 * Module file for Dom Notifications Stacking module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info().
 */
function dom_notifications_stacking_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'dom_notification') {
    $fields['stack_size'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Stack size'))
      ->setDescription(t('Indicates if the notification is a stacked notification for number of events.'))
      ->setInitialValue(1)
      ->setDefaultValue(1);
  }
  return $fields;
}

/**
 * Implements hook_module_implements_alter().
 */
function dom_notifications_stacking_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'dom_notification_presave':
      $group = $implementations['dom_notifications_stacking'];
      unset($implementations['dom_notifications_stacking']);
      $implementations = [
        'dom_notifications_stacking' => $group,
      ] + $implementations;
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function dom_notifications_stacking_dom_notification_presave(EntityInterface $entity) {
  /** @var \Drupal\dom_notifications\Entity\DomNotificationInterface $entity */
  $channel_id = $entity->getChannel()->id();

  // Get stacking settings for notification's channel.
  $stacking = \Drupal::config('dom_notifications_stacking.settings')->get('channels');
  $stacking = array_combine(array_column($stacking, 'channel_plugin'), $stacking);
  $enabled = isset($stacking[$channel_id]['stack'])
    ? $stacking[$channel_id]['stack'] > 1
    : FALSE;

  // If stacking is not enabled for a channel then don't do anything.
  if ($enabled) {
    /** @var \Drupal\dom_notifications_stacking\DomNotificationsStackingServiceInterface $stacking_service */
    $stacking_service = \Drupal::service('dom_notifications_stacking.service');

    // If stacking is enabled we get current stack and add current notification.
    $current_stack = $stacking_service->getCurrentStackSize($entity) + 1;
    $stacking_service->setCurrentStackSize($entity, $current_stack);

    // If we reached stack size one or several times i.e. 5/10/15 then
    // produce stacked notification with current stack size.
    if (($current_stack === $stacking[$channel_id]['stack'])
  || ($current_stack % $stacking[$channel_id]['stack'] === 0)) {
      $entity->set('stack_size', $current_stack);
      $entity->setMessage($stacking[$channel_id]['message']);
      if (!empty($stacking[$channel_id]['uri'])) {
        $entity->setRedirectUri($stacking[$channel_id]['uri']);
      }

      // If current stack exceeded stack size, we need to remove the previous
      // stacked notification.
      if ($current_stack > $stacking[$channel_id]['stack']) {
        $previous_stack = $current_stack - $stacking[$channel_id]['stack'];
        $storage = \Drupal::entityTypeManager()->getStorage('dom_notification');
        $previous = $storage->loadByProperties([
          'channel_id' => $entity->getChannelID(),
          'stack_size' => $previous_stack,
        ]);
        /** @var \Drupal\dom_notifications\Entity\DomNotificationInterface $notification */
        foreach ($previous as $notification) {
          $notification->setPublished(FALSE)->delete();
        }
      }
    }

    // Do not produce notification if we reached stack size once.
    elseif ($current_stack > $stacking[$channel_id]['stack']) {
      $entity->setPublished(FALSE);
    }

    $entity->set('flag', (boolean) $stacking[$channel_id]['flag']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dom_notifications_stacking_dom_notification_insert(EntityInterface $entity) {
  /** @var \Drupal\dom_notifications\Entity\DomNotificationInterface $entity */
  $channel_id = $entity->getChannel()->id();

  // Get stacking settings for notification's channel.
  $stacking = \Drupal::config('dom_notifications_stacking.settings')->get('channels');
  $stacking = array_combine(array_column($stacking, 'channel_plugin'), $stacking);
  $enabled = isset($stacking[$channel_id]['stack'])
    ? $stacking[$channel_id]['stack'] > 1
    : FALSE;

  // If stacking is enabled and notification is not published then remove it.
  if ($enabled && !$entity->isPublished()) {
    $entity->delete();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function dom_notifications_stacking_dom_notification_delete(EntityInterface $entity) {
  /** @var \Drupal\dom_notifications_stacking\DomNotificationsStackingServiceInterface $service */
  $service = \Drupal::service('dom_notifications_stacking.service');
  /** @var \Drupal\dom_notifications\Entity\DomNotificationInterface $entity */
  if ($entity->isPublished() && ($count = $service->getCurrentStackSize($entity))) {
    // Update count in a table if notification is removed.
    $stack = (int) $entity->get('stack_size')->getString();
    $service->setCurrentStackSize($entity, max(0, $count - $stack));
  }
}
