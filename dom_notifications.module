<?php

/**
 * @file
 * Contains dom_notifications.module.
 */

use Drupal\Core\Database\Query\Condition;
use Drupal\dom_notifications\DomNotificationsException;

/**
 * Implements hook_cron().
 */
function dom_notifications_cron() {
  $last_check = \Drupal::state()->get('dom_notifications.delete_check', 0);
  $request_time = \Drupal::time()->getRequestTime();

  // Execute only once every day, so it won't be cleaning up too often.
  if ($request_time > $last_check + 24 * 60 * 60) {
    /** @var \Drupal\dom_notifications\DomNotificationsServiceInterface $notifications_service */
    $notifications_service = \Drupal::service('dom_notifications.service');
    $notifications_service->executeCleaningUp();

    \Drupal::state()->set('dom_notifications.delete_check', $request_time);
  }
}

/**
 * Implements hook_entity_update().
 */
function dom_notifications_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  $query = \Drupal::entityTypeManager()
    ->getStorage('dom_notification')
    ->getQuery();

  // Fetch notifications related to the entity.
  $related_condition = new Condition('AND');
  $related_condition->condition('related_entity_type', $entity->getEntityTypeId());
  $related_condition->condition('related_entity_id', $entity->id());

  // Or notification created by an entity if entity is user.
  $condition = new Condition('OR');
  $condition->condition($related_condition);
  if ($entity->getEntityTypeId() === 'user') {
    $condition->condition('uid', $entity->id());
  }

  $related_notifications = $query->execute();
  if (empty($related_notifications)) {
    return;
  }

  \Drupal::entityTypeManager()->getStorage('dom_notification')->resetCache($related_notifications);
}

/**
 * Implements hook_query_TAG_alter().
 */
function dom_notifications_query_dom_notification_access_alter(Drupal\Core\Database\Query\AlterableInterface $query) {
  // Get the account for which notifications list is built.
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  // User with admin notification are allowed to see all the notifications.
  // Also we allow requests from cron to receive all notifications for clean up.
  if ($account->hasPermission('administer dom notifications')
|| $query->hasTag('dom_notification_omit_access')) {
    return;
  }

  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
  $table_mapping = \Drupal::entityTypeManager()
    ->getStorage('dom_notification')
    ->getTableMapping();
  $base_table = $table_mapping->getBaseTable();
  $data_table = $table_mapping->getDataTable();

  // Get aliases for base and data tables.
  $tables = $query->getTables();
  $table_names = array_column($tables, 'alias', 'table');
  $base_table_alias = $table_names[$base_table] ?? NULL;
  $data_table_alias = $table_names[$data_table] ?? NULL;

  // If no base table in the query, that means select is not for notifications.
  if (!$base_table_alias && !$data_table_alias) {
    throw new DomNotificationsException(t('Query tagged for dom_notification entity access, but there is no base table.'));
  }

  if (!$data_table_alias) {
    $data_table_alias = $query->addJoin('INNER', $data_table, 'dndt', "dndt.id = {$base_table_alias}.id");
  }

  // Add join to table that tracks user presence in notification channel if
  // it's not joined already. If it is joined manually then conditions have
  // already been enforced.
  if (!array_key_exists('dom_notifications_user_channels', $table_names)) {
    $alias = $query->addJoin('INNER', 'dom_notifications_user_channels', 'dnuc', "dnuc.channel_id = {$data_table_alias}.channel_id");

    // Add condition to take only notifications from channels user subscribed to.
    $query->condition($alias . '.uid', $account->id());

    // Hide notifications initiated by the user, so he won't see own.
    $query->condition($data_table_alias . '.uid', $account->id(), '<>');
  }
}
