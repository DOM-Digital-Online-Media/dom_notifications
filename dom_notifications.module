<?php

/**
 * @file
 * Contains dom_notifications.module.
 */

use Drupal\dom_notifications\DomNotificationsException;

/**
 * Implements hook_cron().
 */
function dom_notifications_cron() {
  $last_check = \Drupal::state()->get('dom_notifications.delete_check', 0);
  $request_time = \Drupal::time()->getRequestTime();

  // Execute only once every day, so it won't be cleaning up too often.
  if ($request_time > $last_check + 24 * 60 * 60) {
    /** @var \Drupal\dom_notifications\DomNotificationsServiceInterface $notifications_service */
    $notifications_service = \Drupal::service('dom_notifications.service');
    $notifications_service->executeCleaningUp();

    \Drupal::state()->set('dom_notifications.delete_check', $request_time);
  }
}

/**
 * Implements hook_entity_update().
 */
function dom_notifications_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  $query = \Drupal::entityTypeManager()
    ->getStorage('dom_notification')
    ->getQuery();

  // Fetch notifications related to the entity.
  $related_condition = $query->andConditionGroup();
  $related_condition->condition('related_entity_type', $entity->getEntityTypeId());
  $related_condition->condition('related_entity_id', $entity->id());

  // Or notification created by an entity if entity is user.
  $condition = $query->orConditionGroup();
  $condition->condition($related_condition);
  if ($entity->getEntityTypeId() === 'user') {
    $condition->condition('uid', $entity->id());
  }

  $related_notifications = $query->execute();
  if (empty($related_notifications)) {
    return;
  }

  \Drupal::entityTypeManager()->getStorage('dom_notification')->resetCache($related_notifications);
}
